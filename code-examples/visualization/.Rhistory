e1 <- exp(gamma1)
q <- p
a <- e1-e1*p)
b <- p*(1+e1)+q*(1-e1)-1
c <- p
x <- log((solve(a, b, c)))
b^2
4*a*c
e1 <- exp(gamma1)
q <- p
q <- .5
a <- e1-e1*p)
b <- p*(1+e1)+q*(1-e1)-1
c <- p
x <- log((solve(a, b, c)))
a <- e1-e1*p
b <- p*(1+e1)+q*(1-e1)-1
c <- p
x <- log((solve(a, b, c)))
x <- (-b-sqrt(b^2-4*a*c))/2*a
x <- log((solve(a, b, c)))
x
uniroot(function(x)
{ p-p*(exp(x+gamma1)/(1+exp(x+gamma1)))-(1-p)*exp(x)/(1+exp(x))},
interval = c(-31,10), extendInt="yes")$root
x <- log((solve(a, b, c)))
x
x <- (-b-sqrt(b^2-4*a*c))/2*a
x
x <- (-b-sqrt(b^2-4*a*c))/(2*a)
x
solve <- function(a, b, c) {
c((-b-sqrt(b^2-4*a*c))/(2*a),
(-b+sqrt(b^2-4*a*c))/(2*a))
# x1 <- min(max((-b-sqrt(b^2-4*a*c))/2*a, 0), 1)
# x2 <- min(max((-b+sqrt(b^2-4*a*c))/2*a, 0), 1)
# max(x1, x2)
}
x <- log((solve(a, b, c)))
x
uniroot(function(x)
{ p-p*(exp(x+gamma1)/(1+exp(x+gamma1)))-(1-p)*exp(x)/(1+exp(x))},
interval = c(-31,10), extendInt="yes")$root
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
x <- -2.6
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
x <- log((solve(a, b, c)))
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
q*x/(1+e1*x)+(1-q)*x/(1+x)-p
x <- solve(a, b, c)
x
q*x/(1+e1*x)+(1-q)*x/(1+x)-p
a <- e1-e1*p
b <- p*(1+e1)+q*(1-e1)-1
c <- p
x <- solve(a, b, c)
q*x/(1+e1*x)+(1-q)*x/(1+x)-p
q*e1*x/(1+e1*x)+(1-q)*x/(1+x)-p
e1
q*e1*x/(1+e1*x)+(1-q)*x/(1+x)-p
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
x <- log(solve(a, b, c))
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
x <- -2.6
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
uniroot(function(x)
{ p-p*(exp(x+gamma1)/(1+exp(x+gamma1)))-(1-p)*exp(x)/(1+exp(x))},
interval = c(-31,10), extendInt="yes")$root
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
x <- -2.6
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
q <- .5
uniroot(function(x)
{ p-q*(exp(x+gamma1)/(1+exp(x+gamma1)))-(1-q)*exp(x)/(1+exp(x))},
interval = c(-31,10), extendInt="yes")$root
x <- log(solve(a, b, c))
x
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
x <- -3.6
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
x <- log(solve(a, b, c))
-p + (1-q)*exp(x)/(1+exp(x)) + q*exp(x+gamma1)/(1+exp(x+gamma1))
install.packages('devtools')
install.packages('git2r')
:bn
file_name = 'by_precinct_rescaled'
ggsave(paste(file_name, '.pdf'), width=5, height=5)
ggsave(paste(file_name, '.png'), width=5, height=5)
# Chunk 1: preamble
library(ggplot2)
library(scales)
library(plyr)
library(dplyr)
theme_set(theme_bw())
load('../../../data/sqf.Rdata')
# Chunk 2: by precinct: init
p <- ggplot(data=hitrate_by_precinct, aes(x=black, y=white)) +
geom_point() +
scale_x_continuous('\nHit rate for black suspects',
labels=percent, limits=c(0, .3)) +
scale_y_continuous('Hit rate for white suspects\n',
labels=percent, limits=c(0, .5))
p
# Chunk 3
file_name = 'by_precinct_01_init'
w = 5
h = 5
ggsave(paste0('plots/', file_name, '.pdf'), width=w, height=h)
ggsave(paste0('plots/', file_name, '.png'), width=w, height=h)
# Chunk 4: by precinct: rescale
p <- ggplot(data=hitrate_by_precinct, aes(x=black, y=white)) +
geom_point() +
scale_x_continuous('\nHit rate for black suspects',
labels=percent, limits=c(0, .5)) +
scale_y_continuous('Hit rate for white suspects\n',
labels=percent, limits=c(0, .5))
p
# Chunk 5
file_name = 'by_precinct_02_rescale'
w = 5
h = 5
ggsave(paste0('plots/', file_name, '.pdf'), width=w, height=h)
ggsave(paste0('plots/', file_name, '.png'), width=w, height=h)
# Chunk 6: by precinct: add diagonal
p <- ggplot(data=hitrate_by_precinct, aes(x=black, y=white)) +
geom_point() +
geom_abline(slope=1, intercept=0, linetype='dashed') +
scale_x_continuous('\nHit rate for black suspects',
labels=percent, limits=c(0, .5)) +
scale_y_continuous('Hit rate for white suspects\n',
labels=percent, limits=c(0, .5))
p
# Chunk 7
file_name = 'by_precinct_03_add_diagonal'
w = 5
h = 5
ggsave(paste0('plots/', file_name, '.pdf'), width=w, height=h)
ggsave(paste0('plots/', file_name, '.png'), width=w, height=h)
# Chunk 8: by precinct: resize points
p <- ggplot(data=hitrate_by_precinct, aes(x=black, y=white)) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0, linetype='dashed') +
scale_x_continuous('\nHit rate for black suspects',
labels=percent, limits=c(0, .5)) +
scale_y_continuous('Hit rate for white suspects\n',
labels=percent, limits=c(0, .5))
p
# Chunk 9
file_name = 'by_precinct_04_resize'
w = 5
h = 5
ggsave(paste0('plots/', file_name, '.pdf'), width=w, height=h)
ggsave(paste0('plots/', file_name, '.png'), width=w, height=h)
# Chunk 10: by location: init
p <- ggplot(data=hitrate_by_location, aes(x=black, y=white,
group=location.housing)) +
geom_point(aes(color=location.housing), alpha=.6) +
geom_abline(slope=1, intercept=0, linetype='dashed') +
scale_color_discrete(element_blank(),
breaks=c('housing', 'neither', 'transit'),
labels=c('Public housing', 'Pedestrian', 'Transit')) +
scale_x_continuous('\nHit rate for black suspects',
labels=percent, limits=c(0, .8)) +
scale_y_continuous('Hit rate for white suspects\n',
labels=percent, limits=c(0, .8)) +
theme(legend.position=c(1, 0), legend.justification=c(1, 0),
legend.background=element_blank())
p
# Chunk 11
file_name = 'by_location_01_init'
w = 5
h = 5
ggsave(paste0('plots/', file_name, '.pdf'), width=w, height=h)
ggsave(paste0('plots/', file_name, '.png'), width=w, height=h)
# Chunk 12: by location: log scale
p <- ggplot(data=hitrate_by_location, aes(x=black, y=white,
group=location.housing)) +
geom_point(aes(color=location.housing), alpha=.6) +
geom_abline(slope=1, intercept=0, linetype='dashed') +
scale_color_discrete(element_blank(),
breaks=c('housing', 'neither', 'transit'),
labels=c('Public housing', 'Pedestrian', 'Transit')) +
scale_x_continuous('\nHit rate for black suspects',  labels=percent,
trans='log10', limits=c(0.003, 1),
breaks=c(.003, .01, .03, .1, .3, 1)) +
scale_y_continuous('Hit rate for white suspects\n',  labels=percent,
trans='log10', limits=c(0.003, 1),
breaks=c(.003, .01, .03, .1, .3, 1)) +
theme(legend.position=c(1, 0), legend.justification=c(1, 0),
legend.background=element_blank())
p
# Chunk 13
file_name = 'by_location_02_log'
w = 5
h = 5
ggsave(paste0('plots/', file_name, '.pdf'), width=w, height=h)
ggsave(paste0('plots/', file_name, '.png'), width=w, height=h)
N <- 1e5;
X <- 1:N
m <- apply(X, 2, is_good(runif(3)))
is_good <- function(vec) {
if (length(vec) != 3) {
# it's always a good idea to make sure your
# function gets what it expects to get
stop('is_good requires a vector of length 3')
}
for (i in 1:3) {
if (vec[i] > sum(vec[-i])) {
return(FALSE)
}
}
return(TRUE)
}
N <- 1e5;
ptm <- proc.time()  # measure execution time
X <- 1:N
m <- apply(X, 2, is_good(runif(3)))
sum(m) / N
proc.time() - ptm
m <- apply(X, 2, is_good(runif(3)))
N <- 1e5;
ptm <- proc.time()  # measure execution time
X <- 1:N
m <- apply(X, 2, function (x) {is_good(runif(3))})
sum(m) / N
proc.time() - ptm
m <- apply(X, 2, function (x) {is_good(runif(3))})
X
X <- 1:N
m <- sapply(X, function (x) {is_good(runif(3))})
N <- 1e5;
ptm <- proc.time()  # measure execution time
X <- 1:N
m <- sapply(X, function (x) {is_good(runif(3))})
sum(m) / N
proc.time() - ptm
N <- 1e5;
ptm <- proc.time()  # measure execution time
X <- matrix(runif(N*3), nrow=3, ncol=N)
m <- apply(X, 2, is_good)
mean(m)
proc.time() - ptm
N <- 1e5;
ptm <- proc.time()  # measure execution time
X <- matrix(runif(N*3), nrow=3, ncol=N)
m <- 0
for (i in 1:N) {
if (is_good(X[,i])) {
m <- m + 1
}
}
m / N
proc.time() - ptm
version
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon",
)
))
library(ggplot2)
library(dplyr)
setwd("~/repos/css/code-examples/visualization")
theme_set(theme_bw())
read.csv("../data/inaugural_words.csv")
word_counts <- read.csv("../data/inaugural_words.csv")
word_counts
head(word_counts)
word_counts %>%
group_by(name) %>%
top_n(5, word)
word_counts %>%
group_by(name) %>%
top_n(5, -word)
word_counts %>%
group_by(name) %>%
top_n(5, desc(word))
word_counts %>%
group_by(name) %>%
top_n(5, desc(count))
word_counts %>%
group_by(name) %>%
top_n(5, count)
word_counts <- read.csv("../data/inaugural_words.csv")
word_counts %>%
group_by(name) %>%
top_n(5, count)
word_counts <- read.csv("../data/inaugural_words.csv")
word_counts %>%
group_by(name) %>%
top_n(5, count)
word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
select(count, word)
cat(
word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
select(count, word)
)
cat(word_counts)
word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
select(count, word)
word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
select(count, word)
word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
ungroup() %>%
select(count, word)
bush <- word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
ungroup() %>%
select(count, word)
cat(bush)
cat(bush$count, bush$word)
bush
data.frame(bush)
cat(data.frame(bush))
print(data.frame(bush))
data.frame(bush)
print(data.frame(bush), row.names=FALSE)
print(data.frame(bush), row.names=FALSE, right=FALSE)
bush <- word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
ungroup() %>%
top_n(20, count) %>%
select(count, word)
print(data.frame(bush), row.names=FALSE, right=FALSE)
bush <- word_counts %>%
group_by(name) %>%
filter(name == 'bush') %>%
ungroup() %>%
# top_n(20, count) %>%
select(count, word)
print(data.frame(bush), row.names=FALSE, right=FALSE)
bush <- word_counts %>%
group_by(name) %>%
filter(name == 'obama') %>%
ungroup() %>%
# top_n(20, count) %>%
select(count, word)
print(data.frame(bush), row.names=FALSE, right=FALSE)
wc <- word_counts %>%
group_by(name) %>%
top_n(10, count)
wc
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
geom_bar()
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity")
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(~ name) %>%
geom_bar(stat="identity")
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(~ name) +
geom_bar(stat="identity")
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(~ name, scale="free_x") +
geom_bar(stat="identity")
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(~ name, scale="free_x") +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(~ name, scale="free") +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(name ~, scale="free") +
geom_bar(stat="identity") +
coord_flip()
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(name ~., scale="free") +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_wrap(name ~., scale="free") +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_wrap(name ~, scale="free") +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity", aes(color=name)) +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity", position="dodge", aes(color=name, fill=name)) +
coord_flip()
p
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
coord_flip()
wc_bush <- wc %>%
filter(name == "bush")
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
coord_flip()
p
wc <- word_counts %>%
group_by(name) %>%
top_n(5, count)
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(name~.) ~
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(name~.) +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(. ~ name) +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(. ~ name, scale="free") +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(. ~ name, scale="free_x") +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc, aes(x=word, y=count, group=name)) +
facet_grid(name ~ ., scale="free_x") +
geom_bar(stat="identity") +
coord_flip()
p
wc_bush <- wc %>%
filter(name == "bush")
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
coord_flip()
p
wc_bush <- wc %>%
filter(name == "bush") %>%
arrange(desc(count))
wc_bush
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
coord_flip()
p
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=wc_bush$word)
p
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=wc_bush$word)
p
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=wc_bush$word) +
coord_flip()
p
wc_bush <- wc %>%
filter(name == "bush") %>%
arrange(count)
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=wc_bush$word) +
coord_flip()
p
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
scale_x_discrete("Word\n", limits=wc_bush$word) +
scale_y_continuous("\nCount")
coord_flip()
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
geom_bar(stat="identity") +
scale_x_discrete("Word\n", limits=wc_bush$word) +
scale_y_continuous("\nCount") +
coord_flip()
p
p <- ggplot(data=wc_bush, aes(x=word, y=count, group=name)) +
ggtitle('Bush (2001)') +
geom_bar(stat='identity') +
scale_x_discrete('Word\n', limits=wc_bush$word) +
scale_y_continuous('\nCount') +
coord_flip()
p
wc_obama <- wc %>%
filter(name == 'obama') %>%
arrange(count)
p <- ggplot(data=wc_obama, aes(x=word, y=count, group=name)) +
ggtitle('Obama (2009)\n') +
geom_bar(stat='identity') +
scale_x_discrete('Word\n', limits=wc_obama$word) +
scale_y_continuous('\nCount') +
coord_flip()
p
